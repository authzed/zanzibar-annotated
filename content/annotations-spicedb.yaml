id: 'spicedb'
label: 'SpiceDB vs Zanzibar'
title: 'Insights from building SpiceDB'
subtitle: 'Thoughts and lessons learned about the paper while implementing SpiceDB.'
cta: |
  Thoughts and lessons learned about the paper while implementing [SpiceDB](https://github.com/authzed/spicedb)
description: |
  SpiceDB was designed to be the most accurate, open source implementation of Zanzibar.

  Learn more about [SpiceDB](https://authzed.com/spicedb?utm_source=za&utm_medium=menu).
highlightColor: 'sky'
groups:
  page-1-col-1:
    "id?":
      content: |
        Note that this means namespaces ("schema" in SpiceDB) is also versioned, allowing for older versions to be used for evaluation while their queries are still running.
    config-language:
      content: |
        The callout of a configuration language could indicate a DSL for configuring Zanzibar, like the schema language in SpiceDB.

        However, there appears to be no further mention or example of the configuration *language* itself within the paper, suggesting this feature was not described.

  page-2-col-1:
    user-set-acl:
      content: |
        Defining an ACL based on a *set* of users can be non-obvious in its usefulness at first.

        However, it is quite powerful: for example, rather than granting a role to a team as a whole, a role could be granted to the *members* of a team, or to the *owners* of an organization, allowing for intent to be specified when the role itself is defined.
    client-specified-consistency:
      content: |
        This is an extremely important, but often overlooked feature of Zanzibar: by allowing *clients* to specify their consistency requirements, including based on other changes made, it can achieve an excellent balance between *safety* and *performance*.

        SpiceDB follows this requirement by supporting Zookies/ZedTokens.

  page-2-col-2:
    relation-tuples:
      content: |
        "relationships" in SpiceDB parlance. To disambiguate things, we've chosen to use some slightly different terms for SpiceDB.
    relation-tuple-syntax:
      content: |
        This relationship (relation tuple) syntax can be hard to grok at first, especially because it is *inverted* from the expectation of subject-role-object.
    userset-support:
      content: |
        Note that in SpiceDB, only a "userset" is supported (called a "Subject"), as there is no predefined set of users IDs ala Google's GAIA.
    relations-vs-permissions:
      content: |
        In SpiceDB, we've chosen to separate the idea of "permissions" (access control which is abstract) from "relations" (the way objects can relate to one another). This is simply a type checking convention, with all becoming "relations" within the core Zanzibar-like engine.

  page-3-col-1:
    new-enemy:
      content: |
        This [blog post](https://authzed.com/blog/new-enemies/) for more details about the New Enemy problem.
    "?":
      content: |
        In SpiceDB, we use the terms "resource", "permission" and "subject", to be both more descriptive and more generic.

  page-3-col-2:
    zedtoken:
      content: |
        SpiceDB uses the term "Zedtoken" to differentiate slightly from Zookie, which can be an overloaded term.
    level-of-consistency:
      content: |
        In SpiceDB, the client can choose what level of consistency they require: full consistency, at least as fresh as a particular update, etc.

  page-4-col-1:
    object-definitions:
      content: |
        Called "object definitions" in SpiceDB, as the term "namespace" is quite overloaded.
    userset-rewrite-rules:
      content: |
        A `permission` in SpiceDB.
    this-rule:
      content: |
        When we originally designed SpiceDB, the usage of `_this` proved to be a point of major misunderstanding, as it makes a `relation` into *both* a store of relationships and a computed result.

        We therefore chose to remove `_this` and instead break relations into the two categories of `relation` and `permission`, with only `permission` holding computed or abstract results.
    computed-userset:
      content: |
        In SpiceDB: a reference to another relation, ala:

        ```
        // computed_userset
        permission view = viewer
        ```

  page-4-col-2:
    tuple-to-userset:
      content: |
        In SpiceDB, an arrow:

        ```
        // tuple_to_userset
        permission view = parent->view
        ```
    subexpressions:
      content: |
        In SpiceDB parlance:

        ```
        permission view = viewer & editor - banned
        ```

        We choose to use an opaque cookie instead of the actual timestamp to discourage our clients from choosing arbitrary timestamps and to allow future extensions.
        SpiceDB's ZedToken's are also opaque, for the same reason.
    opaque-tokens:
      content: |
        SpiceDB's ZedToken's are also opaque, for the same reason.

  page-5-col-1:
    zedtoken-consistency-performance:
      content: |
        Zookies/Zedtokens allow for consistency while not sacrificing performance; without them, any implementation has to compromise on one or the other.
    "??":
      content: |
        Some simpler implementations of Zanzibar do in fact store a relationship for each object, which can result in improved performance for checks, but adversely affect cache latency and other operations.
    lock-tuple:
      content: |
        We've extended this capability slightly in SpiceDB via the use of preconditions.

  page-5-col-2:
    auth-token:
      content: |
        This is a key difference in SpiceDB: SpiceDB does not restrict checks to simply users, but any *subject type* defined.
    content-change-check:
      content: |
        This was originally present in V0 of SpiceDB's API, but was removed in favor of being able to specify a consistency level of "full consistency" on the normal CheckPermission call in V1.
    "???":
      content: |
        SpiceDB takes this one step further, and allows for client-provided consistency options, to allow for specifying the exact nature of staleness that is considered okay for the request.
    lookup-subjects:
      content: |
        Note here that Expand does *not* automatically recurse through other subjects, which can make it hard to use for UIs that need to display all reachable subjects.

        SpiceDB has added the LookupSubjects API to provide this capability.

  page-6-col-1:
    "????":
      content: |
        This is accomplished in SpiceDB via the use of a fully consistent Check.
    "?????":
      content: |
        This is often a non-obvious discovery to those using a Read-like API.

  page-6-col-2:
    config-changelog:
      content: |
        Note that this means namespaces ("schema" in SpiceDB) is also versioned, allowing for older versions to be used for evaluation while their queries are still running.

  page-7-col-1:
    staleness:
      content: |
        This is often surprising to people new to the Zanzibar model: staleness is tolerated, so long as it is "safe" to do so, either via specifying MInimizeLatency or giving a ZedToken with an explicit lower bound.

  page-7-col-2:
    leopard-index:
      content: |
        While not given a great detail, Leopard is known to be specialized only to nested group membership, which is often deep and also easy to compute, having no computation besides membership.

        In SpiceDB we are planning to generalize this index as the Tiger cache, for any configured relation(s) or permission(s).
    "??????":
      content: |
        By default 24 hours in most datastores in SpiceDB.

  page-8-col-2:
    timestamp-quantization:
      content: |
        In SpiceDB, this quantization rounding is configurable and defaults to 5s: this means that caches will be reused for approximately 5s before the next quantization window is chosen.
    consistent-hashing:
      content: |
        See this [blog post](https://authzed.com/blog/consistent-hash-load-balancing-grpc/) for how this is done in SpiceDB.

  page-9-col-2:
    "???????":
      content: |
        Called the "Dispatch API" in SpiceDB
    configurable-consistency:
      content: |
        These same requests (and LookupResources and LookupSubjects) support configurable consistency in SpiceDB.

  page-11-col-1:
    "????????":
      content: |
        In SpiceDB, these are equivalent to [`minimize_latency`](https://docs.authzed.com/reference/api-consistency#minimize_latency) and [`fully_consistent`](https://docs.authzed.com/reference/api-consistency#fully_consistent).

  page-12-col-1:
    "?????????":
      content: |
        As mentioned here, these hit rates are fairly low. For *most* SpiceDB users, the cache rates should be much higher (around ~25-50%), but it depends highly on traffic patterns and the shape of the data. We are working on SpiceDB on further improvements to push these numbers even higher.
